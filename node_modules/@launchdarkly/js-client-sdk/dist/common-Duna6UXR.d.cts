import { LDIdentifyOptions, LDClient as LDClient$1, LDContext, LDPluginBase, Hook, LDOptions, BasicLoggerOptions, LDLogger } from '@launchdarkly/js-client-sdk-common';

interface BrowserIdentifyOptions extends Omit<LDIdentifyOptions, 'waitForNetworkResults'> {
    /**
     * The signed context key if you are using [Secure Mode]
     * (https://docs.launchdarkly.com/sdk/features/secure-mode#configuring-secure-mode-in-the-javascript-client-side-sdk).
     */
    hash?: string;
    /**
     * The initial set of flags to use until the remote set is retrieved.
     *
     * Bootstrap data can be generated by server SDKs. When bootstrap data is provided the SDK the
     * identification operation will complete without waiting for any values from LaunchDarkly and
     * the variation calls can be used immediately.
     *
     * If streaming is activated, either it is configured to always be used, or is activated
     * via setStreaming, or via the addition of change handlers, then a streaming connection will
     * subsequently be established.
     *
     * For more information, see the [SDK Reference Guide](https://docs.launchdarkly.com/sdk/features/bootstrapping#javascript).
     */
    bootstrap?: unknown;
}

/**
 *
 * The LaunchDarkly SDK client object.
 *
 * Applications should configure the client at page load time and reuse the same instance.
 *
 * For more information, see the [SDK Reference Guide](https://docs.launchdarkly.com/sdk/client-side/javascript).
 */
type LDClient = Omit<LDClient$1, 'setConnectionMode' | 'getConnectionMode' | 'getOffline' | 'identify'> & {
    /**
     * @ignore
     * Implementation Note: We are not supporting dynamically setting the connection mode on the LDClient.
     * Implementation Note: The SDK does not support offline mode. Instead bootstrap data can be used.
     * Implementation Note: The browser SDK has different identify options, so omits the base implementation
     * from the interface.
     */
    /**
     * Specifies whether or not to open a streaming connection to LaunchDarkly for live flag updates.
     *
     * If this is true, the client will always attempt to maintain a streaming connection; if false,
     * it never will. If you leave the value undefined (the default), the client will open a streaming
     * connection if you subscribe to `"change"` or `"change:flag-key"` events (see {@link LDClient.on}).
     *
     * This can also be set as the `streaming` property of {@link LDOptions}.
     */
    setStreaming(streaming?: boolean): void;
    /**
     * Identifies a context to LaunchDarkly.
     *
     * Unlike the server-side SDKs, the client-side JavaScript SDKs maintain a current context state,
     * which is set when you call `identify()`.
     *
     * Changing the current context also causes all feature flag values to be reloaded. Until that has
     * finished, calls to {@link variation} will still return flag values for the previous context. You can
     * await the Promise to determine when the new flag values are available.
     *
     * @param context
     *    The LDContext object.
     * @param identifyOptions
     *    Optional configuration. Please see {@link LDIdentifyOptions}.
     * @returns
     *    A Promise which resolves when the flag values for the specified
     * context are available. It rejects when:
     *
     * 1. The context is unspecified or has no key.
     *
     * 2. The identify timeout is exceeded. In client SDKs this defaults to 5s.
     * You can customize this timeout with {@link LDIdentifyOptions | identifyOptions}.
     *
     * 3. A network error is encountered during initialization.
     *
     * @ignore Implementation Note: Browser implementation has different options.
     */
    identify(context: LDContext, identifyOptions?: BrowserIdentifyOptions): Promise<void>;
};

/**
 * Interface for plugins to the LaunchDarkly SDK.
 */
interface LDPlugin extends LDPluginBase<LDClient, Hook> {
}

/**
 * Initialization options for the LaunchDarkly browser SDK.
 */
interface BrowserOptions extends Omit<LDOptions, 'initialConnectionMode'> {
    /**
     * Whether the client should make a request to LaunchDarkly for Experimentation metrics (goals).
     *
     * This is true by default, meaning that this request will be made on every page load.
     * Set it to false if you are not using Experimentation and want to skip the request.
     */
    fetchGoals?: boolean;
    /**
     * A function which, if present, can change the URL in analytics events to something other
     * than the actual browser URL. It will be called with the current browser URL as a parameter,
     * and returns the value that should be stored in the event's `url` property.
     *
     * It may be useful to customize the `url` to provide specific meaning, incorporate
     * client-side routing concerns, or redact tokens or other info.
     */
    eventUrlTransformer?: (url: string) => string;
    /**
     * Whether or not to open a streaming connection to LaunchDarkly for live flag updates.
     *
     * If this is true, the client will always attempt to maintain a streaming connection; if false,
     * it never will. If you leave the value undefined (the default), the client will open a streaming
     * connection if you subscribe to `"change"` or `"change:flag-key"` events.
     *
     * This is equivalent to calling `client.setStreaming()` with the same value.
     */
    streaming?: boolean;
    /**
     * Determines if the SDK responds to entering different visibility states, such as foreground and background.
     * An example is flushing buffered events when going to the background.
     *
     * This is true by default. Generally speaking the SDK will be able to most reliably deliver
     * events with this setting on.
     *
     * It may be useful to disable for environments where not all window/document objects are
     * available, such as when running the SDK in a browser extension.
     */
    automaticBackgroundHandling?: boolean;
    /**
     * A list of plugins to be used with the SDK.
     *
     * Plugin support is currently experimental and subject to change.
     */
    plugins?: LDPlugin[];
}

/**
 * Provides a basic {@link LDLogger} implementation.
 *
 * This logging implementation uses a basic format that includes only the log level
 * and the message text. By default this uses log level 'info' and the output is
 * written to `console.error`.
 *
 * To use the logger created by this function, put it into {@link LDOptions.logger}. If
 * you do not set {@link LDOptions.logger} to anything, the SDK uses a default logger
 * that will log "info" level and higher priorty messages and it will log messages to
 * console.info, console.warn, and console.error.
 *
 * @param options Configuration for the logger. If no options are specified, the
 *   logger uses `{ level: 'info' }`.
 *
 * @example
 * This example shows how to use `basicLogger` in your SDK options to enable console
 * logging only at `warn` and `error` levels.
 * ```javascript
 *   const ldOptions = {
 *     logger: basicLogger({ level: 'warn' }),
 *   };
 * ```
 *
 * @example
 * This example shows how to use `basicLogger` in your SDK options to cause all
 * log output to go to `console.log`
 * ```javascript
 *   const ldOptions = {
 *     logger: basicLogger({ destination: console.log }),
 *   };
 * ```
 *
 *  * @example
 * The configuration also allows you to control the destination for each log level.
 * ```javascript
 *   const ldOptions = {
 *     logger: basicLogger({
 *       destination: {
 *         debug: console.debug,
 *         info: console.info,
 *         warn: console.warn,
 *         error:console.error
 *       }
 *     }),
 *   };
 * ```
 */
declare function basicLogger(options: BasicLoggerOptions): LDLogger;

export { type BrowserOptions as B, type LDClient as L, type LDPlugin as a, type BrowserIdentifyOptions as b, basicLogger as c };
