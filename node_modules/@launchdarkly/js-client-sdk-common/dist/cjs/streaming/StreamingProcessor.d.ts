import { Encoding, EventName, internal, LDLogger, ProcessStreamResponse, Requests, StreamingErrorHandler, subsystem } from '@launchdarkly/js-sdk-common';
import { StreamingDataSourceConfig } from '../datasource/DataSourceConfig';
import Requestor from '../datasource/Requestor';
declare class StreamingProcessor implements subsystem.LDStreamProcessor {
    private readonly _plainContextString;
    private readonly _dataSourceConfig;
    private readonly _listeners;
    private readonly _requests;
    private readonly _pollingRequestor;
    private readonly _diagnosticsManager?;
    private readonly _errorHandler?;
    private readonly _logger?;
    private readonly _headers;
    private readonly _streamUri;
    private _eventSource?;
    private _connectionAttemptStartTime?;
    constructor(_plainContextString: string, _dataSourceConfig: StreamingDataSourceConfig, _listeners: Map<EventName, ProcessStreamResponse>, _requests: Requests, encoding: Encoding, _pollingRequestor: Requestor, _diagnosticsManager?: internal.DiagnosticsManager | undefined, _errorHandler?: StreamingErrorHandler | undefined, _logger?: LDLogger | undefined);
    private _logConnectionStarted;
    private _logConnectionResult;
    /**
     * This is a wrapper around the passed errorHandler which adds additional
     * diagnostics and logging logic.
     *
     * @param err The error to be logged and handled.
     * @return boolean whether to retry the connection.
     *
     * @private
     */
    private _retryAndHandleError;
    start(): void;
    stop(): void;
    close(): void;
}
export default StreamingProcessor;
//# sourceMappingURL=StreamingProcessor.d.ts.map