import { LDContext, LDLogger } from '@launchdarkly/js-sdk-common';
import { LDEvaluationDetail } from '../api';
import { LDInspection } from '../api/LDInspection';
/**
 * Manages dispatching of inspection data to registered inspectors.
 */
export default class InspectorManager {
    private _safeInspectors;
    constructor(inspectors: LDInspection[], logger: LDLogger);
    hasInspectors(): boolean;
    /**
     * Notify registered inspectors of a flag being used.
     *
     * @param flagKey The key for the flag.
     * @param detail The LDEvaluationDetail for the flag.
     * @param context The LDContext for the flag.
     */
    onFlagUsed(flagKey: string, detail: LDEvaluationDetail, context?: LDContext): void;
    /**
     * Notify registered inspectors that the flags have been replaced.
     *
     * @param flags The current flags as a Record<string, LDEvaluationDetail>.
     */
    onFlagsChanged(flags: Record<string, LDEvaluationDetail>): void;
    /**
     * Notify registered inspectors that a flag value has changed.
     *
     * @param flagKey The key for the flag that changed.
     * @param flag An `LDEvaluationDetail` for the flag.
     */
    onFlagChanged(flagKey: string, flag: LDEvaluationDetail): void;
    /**
     * Notify the registered inspectors that the context identity has changed.
     *
     * The notification itself will be dispatched asynchronously.
     *
     * @param context The `LDContext` which is now identified.
     */
    onIdentityChanged(context: LDContext): void;
}
//# sourceMappingURL=InspectorManager.d.ts.map