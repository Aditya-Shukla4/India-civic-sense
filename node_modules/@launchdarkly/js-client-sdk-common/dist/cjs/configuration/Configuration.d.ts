import { ApplicationTags, internal, LDFlagSet, LDLogger, LDPluginEnvironmentMetadata, ServiceEndpoints } from '@launchdarkly/js-sdk-common';
import { Hook, type LDOptions } from '../api';
import { LDInspection } from '../api/LDInspection';
export interface LDClientInternalOptions extends internal.LDInternalOptions {
    trackEventModifier?: (event: internal.InputCustomEvent) => internal.InputCustomEvent;
    getImplementationHooks: (environmentMetadata: LDPluginEnvironmentMetadata) => Hook[];
    credentialType: 'clientSideId' | 'mobileKey';
}
export interface Configuration {
    readonly logger: LDLogger;
    readonly maxCachedContexts: number;
    readonly capacity: number;
    readonly diagnosticRecordingInterval: number;
    readonly flushInterval: number;
    readonly streamInitialReconnectDelay: number;
    readonly allAttributesPrivate: boolean;
    readonly debug: boolean;
    readonly diagnosticOptOut: boolean;
    readonly sendEvents: boolean;
    readonly sendLDHeaders: boolean;
    readonly useReport: boolean;
    readonly withReasons: boolean;
    readonly privateAttributes: string[];
    readonly tags: ApplicationTags;
    readonly applicationInfo?: {
        id?: string;
        version?: string;
        name?: string;
        versionName?: string;
    };
    readonly bootstrap?: LDFlagSet;
    readonly requestHeaderTransform?: (headers: Map<string, string>) => Map<string, string>;
    readonly stream?: boolean;
    readonly hash?: string;
    readonly wrapperName?: string;
    readonly wrapperVersion?: string;
    readonly serviceEndpoints: ServiceEndpoints;
    readonly pollInterval: number;
    readonly userAgentHeaderName: 'user-agent' | 'x-launchdarkly-user-agent';
    readonly trackEventModifier: (event: internal.InputCustomEvent) => internal.InputCustomEvent;
    readonly hooks: Hook[];
    readonly inspectors: LDInspection[];
    readonly credentialType: 'clientSideId' | 'mobileKey';
    readonly getImplementationHooks: (environmentMetadata: LDPluginEnvironmentMetadata) => Hook[];
}
declare const DEFAULT_POLLING: string;
declare const DEFAULT_STREAM: string;
export { DEFAULT_POLLING, DEFAULT_STREAM };
export default class ConfigurationImpl implements Configuration {
    readonly logger: LDLogger;
    private readonly baseUri;
    private readonly eventsUri;
    private readonly streamUri;
    readonly maxCachedContexts = 5;
    readonly capacity = 100;
    readonly diagnosticRecordingInterval = 900;
    readonly flushInterval = 30;
    readonly streamInitialReconnectDelay = 1;
    readonly allAttributesPrivate: boolean;
    readonly debug: boolean;
    readonly diagnosticOptOut: boolean;
    readonly sendEvents: boolean;
    readonly sendLDHeaders: boolean;
    readonly useReport: boolean;
    readonly withReasons: boolean;
    readonly privateAttributes: string[];
    readonly tags: ApplicationTags;
    readonly applicationInfo?: {
        id?: string;
        version?: string;
        name?: string;
        versionName?: string;
    };
    readonly bootstrap?: LDFlagSet;
    readonly requestHeaderTransform?: (headers: Map<string, string>) => Map<string, string>;
    readonly stream?: boolean;
    readonly hash?: string;
    readonly wrapperName?: string;
    readonly wrapperVersion?: string;
    readonly serviceEndpoints: ServiceEndpoints;
    readonly pollInterval: number;
    readonly userAgentHeaderName: 'user-agent' | 'x-launchdarkly-user-agent';
    readonly hooks: Hook[];
    readonly inspectors: LDInspection[];
    readonly trackEventModifier: (event: internal.InputCustomEvent) => internal.InputCustomEvent;
    readonly credentialType: 'clientSideId' | 'mobileKey';
    readonly getImplementationHooks: (environmentMetadata: LDPluginEnvironmentMetadata) => Hook[];
    [index: string]: any;
    constructor(pristineOptions?: LDOptions, internalOptions?: LDClientInternalOptions);
    private _validateTypesAndNames;
}
//# sourceMappingURL=Configuration.d.ts.map