import { Context, LDLogger, Platform } from '@launchdarkly/js-sdk-common';
import FlagStore from './FlagStore';
import FlagUpdater from './FlagUpdater';
import { ItemDescriptor } from './ItemDescriptor';
/**
 * This class handles persisting and loading flag values from a persistent
 * store. It intercepts updates and forwards them to the flag updater and
 * then persists changes after the updater has completed.
 */
export default class FlagPersistence {
    private readonly _platform;
    private readonly _environmentNamespace;
    private readonly _maxCachedContexts;
    private readonly _flagStore;
    private readonly _flagUpdater;
    private readonly _logger;
    private readonly _timeStamper;
    private _contextIndex;
    private _indexKey?;
    private _indexKeyPromise;
    constructor(_platform: Platform, _environmentNamespace: string, _maxCachedContexts: number, _flagStore: FlagStore, _flagUpdater: FlagUpdater, _logger: LDLogger, _timeStamper?: () => number);
    /**
     * Inits flag persistence for the provided context with the provided flags.  This will result
     * in the underlying {@link FlagUpdater} switching its active context.
     */
    init(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): Promise<void>;
    /**
     * Upserts a flag into the {@link FlagUpdater} and stores that to persistence if the upsert
     * was successful / accepted.  An upsert may be rejected if the provided context is not
     * the active context.
     */
    upsert(context: Context, key: string, item: ItemDescriptor): Promise<boolean>;
    /**
     * Loads the flags from persistence for the provided context and gives those to the
     * {@link FlagUpdater} this {@link FlagPersistence} was constructed with.
     */
    loadCached(context: Context): Promise<boolean>;
    private _loadIndex;
    private _storeCache;
}
//# sourceMappingURL=FlagPersistence.d.ts.map