import { Context, LDLogger } from '@launchdarkly/js-sdk-common';
import FlagStore from './FlagStore';
import { ItemDescriptor } from './ItemDescriptor';
export type FlagChangeType = 'init' | 'patch';
/**
 * This callback indicates that the details associated with one or more flags
 * have changed.
 *
 * This could be the value of the flag, but it could also include changes
 * to the evaluation reason, such as being included in an experiment.
 *
 * It can include new or deleted flags as well, so an evaluation may result
 * in a FLAG_NOT_FOUND reason.
 *
 * This event does not include the value of the flag. It is expected that you
 * will call a variation method for flag values which you require.
 */
export type FlagsChangeCallback = (context: Context, flagKeys: Array<string>, type: FlagChangeType) => void;
/**
 * The flag updater handles logic required during the flag update process.
 * It handles versions checking to handle out of order flag updates and
 * also handles flag comparisons for change notification.
 */
export default class FlagUpdater {
    private _flagStore;
    private _logger;
    private _activeContextKey;
    private _changeCallbacks;
    constructor(flagStore: FlagStore, logger: LDLogger);
    init(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): void;
    initCached(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): void;
    upsert(context: Context, key: string, item: ItemDescriptor): boolean;
    on(callback: FlagsChangeCallback): void;
    off(callback: FlagsChangeCallback): void;
}
//# sourceMappingURL=FlagUpdater.d.ts.map