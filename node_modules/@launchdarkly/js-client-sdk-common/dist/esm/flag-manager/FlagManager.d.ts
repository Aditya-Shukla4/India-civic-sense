import { Context, LDLogger, Platform } from '@launchdarkly/js-sdk-common';
import { FlagsChangeCallback } from './FlagUpdater';
import { ItemDescriptor } from './ItemDescriptor';
/**
 * Top level manager of flags for the client. LDClient should be using this
 * interface and not any of the specific instances managed by it. Updates from
 * data sources should be directed to the [init] and [upsert] methods of this
 * interface.
 */
export interface FlagManager {
    /**
     * Attempts to get a flag by key from the current flags.
     */
    get(key: string): ItemDescriptor | undefined;
    /**
     * Gets all the current flags.
     */
    getAll(): {
        [key: string]: ItemDescriptor;
    };
    /**
     * Initializes the flag manager with data from a data source.
     * Persistence initialization is handled by {@link FlagPersistence}
     */
    init(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): Promise<void>;
    /**
     * Attempt to update a flag. If the flag is for the wrong context, or
     * it is of an older version, then an update will not be performed.
     */
    upsert(context: Context, key: string, item: ItemDescriptor): Promise<boolean>;
    /**
     * Asynchronously load cached values from persistence.
     */
    loadCached(context: Context): Promise<boolean>;
    /**
     * Update in-memory storage with the specified flags, but do not persistent them to cache
     * storage.
     */
    setBootstrap(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): void;
    /**
     * Register a flag change callback.
     */
    on(callback: FlagsChangeCallback): void;
    /**
     * Unregister a flag change callback.
     */
    off(callback: FlagsChangeCallback): void;
}
export default class DefaultFlagManager implements FlagManager {
    private _flagStore;
    private _flagUpdater;
    private _flagPersistencePromise;
    /**
     * @param platform implementation of various platform provided functionality
     * @param sdkKey that will be used to distinguish different environments
     * @param maxCachedContexts that specifies the max number of contexts that will be cached in persistence
     * @param logger used for logging various messages
     * @param timeStamper exists for testing purposes
     */
    constructor(platform: Platform, sdkKey: string, maxCachedContexts: number, logger: LDLogger, timeStamper?: () => number);
    private _initPersistence;
    get(key: string): ItemDescriptor | undefined;
    getAll(): {
        [key: string]: ItemDescriptor;
    };
    setBootstrap(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): void;
    init(context: Context, newFlags: {
        [key: string]: ItemDescriptor;
    }): Promise<void>;
    upsert(context: Context, key: string, item: ItemDescriptor): Promise<boolean>;
    loadCached(context: Context): Promise<boolean>;
    on(callback: FlagsChangeCallback): void;
    off(callback: FlagsChangeCallback): void;
}
//# sourceMappingURL=FlagManager.d.ts.map