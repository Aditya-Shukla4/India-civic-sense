import { AutoEnvAttributes, Context, internal, LDContext, LDFlagSet, LDFlagValue, LDLogger, LDPluginEnvironmentMetadata, Platform } from '@launchdarkly/js-sdk-common';
import { Hook, LDClient, type LDOptions } from './api';
import { LDEvaluationDetail, LDEvaluationDetailTyped } from './api/LDEvaluationDetail';
import { LDIdentifyOptions } from './api/LDIdentifyOptions';
import { LDClientInternalOptions } from './configuration';
import { DataManager, DataManagerFactory } from './DataManager';
import LDEmitter, { EventName } from './LDEmitter';
export default class LDClientImpl implements LDClient {
    readonly sdkKey: string;
    readonly autoEnvAttributes: AutoEnvAttributes;
    readonly platform: Platform;
    private readonly _config;
    private _uncheckedContext?;
    private _checkedContext?;
    private readonly _diagnosticsManager?;
    private _eventProcessor?;
    readonly logger: LDLogger;
    private readonly _highTimeoutThreshold;
    private _eventFactoryDefault;
    private _eventFactoryWithReasons;
    protected emitter: LDEmitter;
    private _flagManager;
    private _eventSendingEnabled;
    private _baseHeaders;
    protected dataManager: DataManager;
    protected readonly environmentMetadata: LDPluginEnvironmentMetadata;
    private _hookRunner;
    private _inspectorManager;
    /**
     * Creates the client object synchronously. No async, no network calls.
     */
    constructor(sdkKey: string, autoEnvAttributes: AutoEnvAttributes, platform: Platform, options: LDOptions, dataManagerFactory: DataManagerFactory, internalOptions?: LDClientInternalOptions);
    allFlags(): LDFlagSet;
    close(): Promise<void>;
    flush(): Promise<{
        error?: Error;
        result: boolean;
    }>;
    getContext(): LDContext | undefined;
    protected getInternalContext(): Context | undefined;
    private _createIdentifyPromise;
    /**
     * Identifies a context to LaunchDarkly. See {@link LDClient.identify}.
     *
     * @param pristineContext The LDContext object to be identified.
     * @param identifyOptions Optional configuration. See {@link LDIdentifyOptions}.
     * @returns A Promise which resolves when the flag values for the specified
     * context are available. It rejects when:
     *
     * 1. The context is unspecified or has no key.
     *
     * 2. The identify timeout is exceeded. In client SDKs this defaults to 5s.
     * You can customize this timeout with {@link LDIdentifyOptions | identifyOptions}.
     *
     * 3. A network error is encountered during initialization.
     */
    identify(pristineContext: LDContext, identifyOptions?: LDIdentifyOptions): Promise<void>;
    on(eventName: EventName, listener: Function): void;
    off(eventName: EventName, listener: Function): void;
    track(key: string, data?: any, metricValue?: number): void;
    private _variationInternal;
    variation(flagKey: string, defaultValue?: LDFlagValue): LDFlagValue;
    variationDetail(flagKey: string, defaultValue?: LDFlagValue): LDEvaluationDetail;
    private _typedEval;
    boolVariation(key: string, defaultValue: boolean): boolean;
    jsonVariation(key: string, defaultValue: unknown): unknown;
    numberVariation(key: string, defaultValue: number): number;
    stringVariation(key: string, defaultValue: string): string;
    boolVariationDetail(key: string, defaultValue: boolean): LDEvaluationDetailTyped<boolean>;
    numberVariationDetail(key: string, defaultValue: number): LDEvaluationDetailTyped<number>;
    stringVariationDetail(key: string, defaultValue: string): LDEvaluationDetailTyped<string>;
    jsonVariationDetail(key: string, defaultValue: unknown): LDEvaluationDetailTyped<unknown>;
    addHook(hook: Hook): void;
    /**
     * Enable/Disable event sending.
     * @param enabled True to enable event processing, false to disable.
     * @param flush True to flush while disabling. Useful to flush on certain state transitions.
     */
    protected setEventSendingEnabled(enabled: boolean, flush: boolean): void;
    protected sendEvent(event: internal.InputEvent): void;
    private _handleInspectionChanged;
}
//# sourceMappingURL=LDClientImpl.d.ts.map