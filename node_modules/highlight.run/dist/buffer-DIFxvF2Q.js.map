{"version":3,"file":"buffer-DIFxvF2Q.js","sources":["../src/sdk/util.ts","../src/client/logger.ts","../src/sdk/buffer.ts"],"sourcesContent":["// Object for tracking previously logged messages.\nconst loggedIds = Object.create(null)\n\nexport const internalLog = (\n\tcontext: string,\n\tlevel: keyof Console,\n\t...msg: any\n) => {\n\tconst prefix = `[@launchdarkly plugins]: (${context}): `\n\tconsole[level].apply(console, [prefix, ...msg])\n\tvoid reportLog(prefix, ...msg)\n}\n\n/**\n * Utility to help avoid logging the same message multiple times.\n *\n * This is helpful to prevent spamming the logs with sticky error conditions.\n * For example if local storage cannot be written to, then each attempt to\n * write would fail, and logging each time would spam the logs.\n *\n * @param logOnceId - A message with this ID will only be logged one time for the given context.\n * @param context - The context of the message.\n * @param level - The level of the message.\n * @param msg - The message to log.\n */\nexport const internalLogOnce = (\n\tcontext: string,\n\tlogOnceId: string,\n\tlevel: keyof Console,\n\t...msg: any\n) => {\n\tif (loggedIds[`${context}-${logOnceId}`]) {\n\t\treturn\n\t}\n\tloggedIds[`${context}-${logOnceId}`] = true\n\tinternalLog(context, level, ...msg)\n}\n\nconst reportLog = async (prefix: string, ...msg: any) => {\n\ttry {\n\t\tconst { LDObserve } = await import('./LDObserve')\n\t\tLDObserve.recordLog(`${prefix}${msg}`, 'warn')\n\t} catch (e) {\n\t\t// ignore error  reporting log\n\t}\n}\n","export class Logger {\n\tdebug: boolean | undefined\n\tname: string | undefined\n\n\tconstructor(debug?: boolean, name?: string) {\n\t\tthis.debug = debug\n\t\tthis.name = name\n\t}\n\n\tlog(...data: any[]) {\n\t\tif (this.debug) {\n\t\t\tlet prefix = `[${Date.now()}]`\n\t\t\tif (this.name) {\n\t\t\t\tprefix += ` - ${this.name}`\n\t\t\t}\n\t\t\tconsole.log.apply(console, [prefix, ...data])\n\t\t}\n\t}\n\n\twarn(...data: any[]) {\n\t\tlet prefix = `[${Date.now()}]`\n\t\tif (this.name) {\n\t\t\tprefix += ` - ${this.name}`\n\t\t}\n\t\tconsole.warn.apply(console, [prefix, ...data])\n\t}\n}\n","import { Logger } from '../client/logger'\nimport { internalLog } from './util'\n\ntype Event = { method: string; args: any[] }\n\nexport class BufferedClass<T extends object> {\n\tprotected _sdk!: T\n\tprotected _isLoaded = false\n\tprotected _callBuffer: Array<Event> = []\n\tprotected _capacity: number = 100_000\n\tprotected _droppedEvents: number = 0\n\tprotected _exceededCapacity: boolean = false\n\tprotected _logger = new Logger()\n\n\tprotected _bufferCall(method: string, args: any[]) {\n\t\tif (this._isLoaded) {\n\t\t\t// If already loaded, execute the method directly\n\t\t\ttry {\n\t\t\t\treturn (this._sdk as any)[method](...args)\n\t\t\t} catch (error) {\n\t\t\t\tinternalLog(\n\t\t\t\t\t`Error executing buffered call to ${method}:`,\n\t\t\t\t\t'error',\n\t\t\t\t\terror,\n\t\t\t\t)\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise buffer the call\n\t\t\tthis._enqueue({ method, args })\n\t\t\treturn undefined\n\t\t}\n\t}\n\n\tprotected _enqueue(event: Event) {\n\t\tif (this._callBuffer.length < this._capacity) {\n\t\t\tthis._callBuffer.push(event)\n\t\t\tthis._exceededCapacity = false\n\t\t} else {\n\t\t\tif (!this._exceededCapacity) {\n\t\t\t\tthis._exceededCapacity = true\n\t\t\t\tinternalLog(\n\t\t\t\t\t'Exceeded event queue capacity. Increase capacity to avoid dropping events.',\n\t\t\t\t\t'warn',\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis._droppedEvents += 1\n\t\t}\n\t}\n\n\tload(sdk: T) {\n\t\tthis._sdk = sdk\n\t\tthis._isLoaded = true\n\n\t\t// Process buffered calls\n\t\tfor (const { method, args } of this._callBuffer) {\n\t\t\ttry {\n\t\t\t\t;(this._sdk as any)[method](...args)\n\t\t\t} catch (error) {\n\t\t\t\tinternalLog(\n\t\t\t\t\t`Error executing buffered call to ${method}:`,\n\t\t\t\t\t'error',\n\t\t\t\t\terror,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\t// Clear the buffer\n\t\tthis._callBuffer = []\n\t}\n}\n"],"names":["loggedIds","internalLog","context","level","msg","prefix","reportLog","internalLogOnce","logOnceId","__async","LDObserve","Logger","debug","name","__publicField","data","BufferedClass","method","args","error","event","sdk"],"mappings":"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"}