var d = (l, e, t) => new Promise((f, a) => {
  var h = (s) => {
    try {
      i(t.next(s));
    } catch (o) {
      a(o);
    }
  }, g = (s) => {
    try {
      i(t.throw(s));
    } catch (o) {
      a(o);
    }
  }, i = (s) => s.done ? f(s.value) : Promise.resolve(s.value).then(h, g);
  i((t = t.apply(l, e)).next());
});
import { B as u } from "./buffer-DIFxvF2Q.js";
class n extends u {
  getSession() {
    return this._isLoaded ? this._bufferCall("getSession", []) : null;
  }
  start(e) {
    return d(this, null, function* () {
      return this._sdk.start(e);
    });
  }
  stop() {
    return this._sdk.stop();
  }
  getRecordingState() {
    return this._isLoaded ? this._bufferCall("getRecordingState", []) : "NotRecording";
  }
  snapshot(e) {
    return this._isLoaded ? this._bufferCall("snapshot", [e]) : Promise.resolve(void 0);
  }
  register(e, t) {
    return this._bufferCall("register", [e, t]);
  }
}
let r;
typeof globalThis != "undefined" ? globalThis.LDRecord ? r = globalThis.LDRecord : (r = new n(), globalThis.LDRecord = r) : r = new n();
export {
  r as LDRecord
};
//# sourceMappingURL=LDRecord.js.map
